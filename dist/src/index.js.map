{"version":3,"sources":["../../src/index.js"],"names":["request","require","DummyType","exports","DummyObject","API_PROXY","client","TYPES_REGISTRY","Map","init","setProxy","createClient","getProxy","proxy","getClient","propTypes","primitive","get","val","parent","reference","type","subscribed","ignoreParent","load","id","undefined","referenceArray","child","ids","Promise","all","map","createType","name","endPoint","typeMap","set"],"mappings":"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","file":"index.js","sourcesContent":["/**\r\n * @author Jay Mohile\r\n * @version 0.9.0\r\n */\r\n\r\n// noinspection Annotator\r\nconst request = require('request-json');\r\nrequire('babel-polyfill');\r\n/*\r\nImport Type and Object, separated into modules for scalability.\r\nWe export them to make them accessible through a single outside ui.\r\n */\r\nconst DummyType = require('./DummyType').DummyType;\r\nexports.DummyType = DummyType;\r\nconst DummyObject = require('./DummyObject').DummyObject;\r\nexports.DummyObject = DummyObject;\r\n\r\n/**\r\n * The fully qualified base URL for all network requests.\r\n * @type string;\r\n * @example\r\n * http://example.com\r\n */\r\nlet API_PROXY;\r\n\r\n/**\r\n * The network client that will be used for all network requests.\r\n */\r\nlet client;\r\n\r\n/**\r\n * A registry of all types created.\r\n */\r\nconst TYPES_REGISTRY = new Map();\r\n\r\n/**\r\n * Initialize the dummy client.\r\n * @param {string} API_PROXY The root domain for network activity.\r\n * @returns {void}\r\n **/\r\nexports.init = (API_PROXY) => {\r\n    exports.setProxy(API_PROXY);\r\n    client = request.createClient(exports.getProxy());\r\n};\r\n\r\n/**\r\n * Get the root API proxy.\r\n * @return {string}\r\n */\r\nexports.getProxy = () => API_PROXY;\r\n/**\r\n * Set the root API proxy.\r\n * @param {string} proxy\r\n */\r\nexports.setProxy = (proxy) => {\r\n    API_PROXY = proxy\r\n};\r\n\r\n/**\r\n * Get the network client.\r\n * @return {*}\r\n */\r\nexports.getClient = () => client;\r\n\r\n/**\r\n * Types of properties that an object can hold.\r\n * Primitives store and return a basic value,\r\n * references use an int id to get another object.\r\n * @type {{primitive: function(): {get(*, *): *}, reference: function({type: *}): {type: *, get(*=, *=): *}}}\r\n */\r\nexports.propTypes = {\r\n    /**\r\n     * @return {{get(*, DummyObject): *}}\r\n     */\r\n    primitive: () => ({\r\n        /**\r\n         *\r\n         * @template T\r\n         * @param {T} val\r\n         * @param {DummyObject} parent\r\n         * @return {T}\r\n         */\r\n        get(val, parent) {\r\n            return val;\r\n        }\r\n    }),\r\n    /**\r\n     *\r\n     * @param {DummyType} type\r\n     * @param {boolean} subscribed\r\n     * @param {boolean} ignoreParent\r\n     * @return {{type: DummyType, subscribed: boolean, get(number, DummyObject): Promise<DummyObject, *>}}\r\n     */\r\n    reference: ({type, subscribed = false, ignoreParent = false, load = false}) => (\r\n        {\r\n            reference: true,\r\n            type,\r\n            subscribed,\r\n            ignoreParent,\r\n            load,\r\n            /**\r\n             *\r\n             * @param {number} id\r\n             * @param {DummyObject} parent\r\n             * @return {Promise<DummyObject, *>}\r\n             */\r\n            async get(id, parent = undefined) {\r\n                return type.get(id, this.ignoreParent ? undefined : parent)\r\n            }\r\n        }\r\n    ),\r\n\r\n    /**\r\n     * In many cases, and object will reference many objects in a single field.\r\n     * For example, a month holding many days.\r\n     * This type takes in an array of ids, and returns a promise when all of them resolve.\r\n     *\r\n     * @param {DummyType} type\r\n     * @param {boolean} ignoreParent\r\n     * @return {Promise<Promise<DummyObject,*>[]>}\r\n     */\r\n    referenceArray: ({type, child = undefined, ignoreParent= false, load = false}) => ({\r\n        referenceArray: true,\r\n        type,\r\n        child,\r\n        ignoreParent,\r\n        load,\r\n        /**\r\n         * Resolve all reference ids.\r\n         * @param ids\r\n         * @param parent {DummyObject}\r\n         * @return {Promise<Promise<DummyObject>[]>}\r\n         **/\r\n        get(ids, parent = undefined) {\r\n            return Promise.all(ids.map(id => type.get(id, this.ignoreParent ? undefined: parent)));\r\n        }\r\n    })\r\n};\r\n\r\n\r\n/**\r\n * Create a new DummyType based on a typemap, with an API endpoint.\r\n * @param {{}} typeMap\r\n * @param {string} endPoint\r\n * @return {DummyType}\r\n */\r\nexports.createType = (name, endPoint, typeMap) => {\r\n    const type = new DummyType(typeMap, endPoint);\r\n    TYPES_REGISTRY.set(name, type);\r\n    return type;\r\n};"]}